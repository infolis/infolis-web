# vim: ft=turtleson ts=2 sw=2 list fdm=indent :
#
# This file is the definitive source from which we generate
#
#   * the database schema (for Mongoose)
#   * the ontology (described JSON-LD)
#   * the REST API (GET/POST/PUT/DELETE /api/MyClass)
#   * the REST API documentation (Swagger)
#   * the data model explorer @ http://infolis.gesis.org/play/data-model-explorer
#

@ns
	infolis <http://infolis.gesis.org/infolink-internal/schema/>
	rdf     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
	dc      <http://purl.org/dc/elements/1.1/>
	owl     <http://www.w3.org/2002/07/owl#>
	rdfs    <http://www.w3.org/2000/01/rdf-schema#>
	skos    <http://www.w3.org/2004/02/skos/core#>
	xsd     <http://www.w3.org/2001/XMLSchema#>
	dcterms <http://purl.org/dc/terms/>
	schema  <http://schema.org/>
	bibo    <http://purl.org/ontology/bibo/>
	foaf    <http://xmlns.com/foaf/0.1/>
	dqm     <http://purl.org/dqm-vocabulary/v1/dqm#>
	omnom   <http://onto.dm2e.eu/omnom/>
	doap    <http://usefulinc.com/ns/doap#>
	vann    <http://purl.org/vocab/vann/>
	dcat    <http://www.w3.org/ns/dcat#>

@context
	@id infolis:
	@type owl:Ontology
	@type doap:Project
	dc:title "Infolis Data model"
	dc:description "This ontology is the normative source for the semantics and structure of the domain of the InFoLiS project"
	dcterms:modified
		@value "2015-12-02T13:53:09+0100"
		@type xsd:datetime
	doap:implements
		@id <https://github.com/infolis/infoLink>
	'rdfs:seeAlso': [{
			@id <https://github.com/infolis>
			@type doap:Project
			doap:shortdesc "Github organization containing all the software developed by InFoLiS"
		},{
			@id <https://github.com/kba/jsonld-common-contexts>
			@type doap:Project
			doap:shortdesc "Cached versions of commonly used namespaces"
			doap:programming-language "CoffeeScript"
			doap:programming-language "JavaScript"
		},{
			@id <https://github.com/infolis/express-jsonld>
			@type doap:Project
			doap:shortdesc "JSON-LD content-negotiating middleware for Express based on node-jsonld and rapper"
			doap:programming-language "CoffeeScript"
			'dcterms:requires':[{
				@id <https://github.com/infolis/infolis-logging>
			},{
				@id <https://github.com/infolis/jsonld-rapper>
			}]
		},{
			@id <https://github.com/infolis/jsonld-rapper>
			@type doap:Project
			doap:shortdesc "Convert between RDF and JSON-LD using rapper"
			doap:programming-language "CoffeeScript"
			'dcterms:requires': [{
				@id <https://github.com/kba/jsonld-common-contexts>
			},{
				@id <https://github.com/infolis/infolis-logging>
			}]
		},{
			@id <https://github.com/kba/turtleson>
			@type doap:Project
			doap:shortdesc "Concise, permissive, TURTLE-like dialect of JSON"
			doap:programming-language "CoffeeScript"
			doap:programming-language "JavaScript"
		},{
			@id <https://github.com/infolis/infolis-logging>
			@type doap:Project
			doap:shortdesc "Module-specific Winston logging"
			doap:programming-language "JavaScript"
		},{
			@id <https://github.com/infolis/mongoose-jsonld>
			@type doap:Project
			doap:shortdesc "Add JSON-LD context to a Mongoose schema"
			doap:programming-language "CoffeeScript"
			'dcterms:requires': [{
				@id <https://github.com/infolis/jsonld-rapper>
			},{
				@id <https://github.com/infolis/express-jsonld>
			},{
				@id <https://github.com/kba/turtleson>
			},{
				@id <https://github.com/kba/jsonld-common-contexts>
			},{
				@id <https://github.com/infolis/infolis-logging>
			}]
		},{
			@id <https://github.com/kba/node-vim2html>
			@type doap:Project
			doap:shortdesc "Create HTML highlighted by Vim`s 2html script"
			doap:programming-language "CoffeeScript"
			doap:programming-language "Makefile"
		},{
			@id <https://github.com/infolis/infoLink>
			@type doap:Project
			doap:shortdesc "The software implementing all the algorithms, doing the text mining, linking the entities and much more"
			doap:programming-language "Java"
		},{
			@id <https://github.com/infolis/infolis-datasets>
			@type doap:Project
			doap:shortdesc "Project containing all the data and tools to run learning and linking in bulk in a Linux environment."
			doap:programming-language "Shell"
			doap:programming-language "Python"
		},{
			@id <https://github.com/infolis/infolis-web>
			@type doap:Project
			doap:shortdesc "Project that implements the HTTP-based RESTful Linked Data infrastructure for InFoLiS"
			doap:programming-language "CoffeeScript"
			doap:programming-language "Javascript"
			doap:implements 
				@id infolis:
			'dcterms:requires': [{
				@id <https://github.com/infolis/express-jsonld>
			},{
				@id <https://github.com/infolis/mongoose-jsonld>
			},{
				@id <https://github.com/kba/turtleson>
			},{
				@id <https://github.com/kba/node-vim2html>
			},{
				@id <https://github.com/infolis/infolis-logging>
			}]
				
		}]

Execution
	@context
		dc:description "The concrete execution of an Algorithm."
		vann:example
			@id <http://infolis.gesis.org/infolink-internal/api#!/rest-ld-execution>
		rdfs:subClassOf
			@id schema:Action
		dcterms:source
			@id <https://github.com/infolis/infoLink/blob/master/src/main/java/io/github/infolis/model/Execution.java>
		@type owl:Class

	algorithm
		@context
			dc:description "Java class of the algorithm which is supposed to be executed within this execution."
			dcterms:source
				@id <https://github.com/infolis/infoLink/blob/master/src/main/java/io/github/infolis/model/Execution.java>
		required true
		index: true
		type: String
		enum: [
			# TODO fix this for updated version
			'io.github.infolis.algorithm.BestMatchLinker'
			'io.github.infolis.algorithm.BibliographyExtractor'
			'io.github.infolis.algorithm.DbIndexer'
			'io.github.infolis.algorithm.DoiExtractor'
			'io.github.infolis.algorithm.DoiLinker'
			'io.github.infolis.algorithm.FederatedSearcher'
			'io.github.infolis.algorithm.FrequencyBasedBootstrapping'
			'io.github.infolis.algorithm.GoldLinker'
			'io.github.infolis.algorithm.Indexer'
			'io.github.infolis.algorithm.InfolisPatternSearcher'
			'io.github.infolis.algorithm.KeywordTagger'
			'io.github.infolis.algorithm.LearnPatternsAndCreateLinks'
			'io.github.infolis.algorithm.Learner'
			'io.github.infolis.algorithm.LinkImporter'
			'io.github.infolis.algorithm.LinkIndexer'
			'io.github.infolis.algorithm.LocalSearcher'
			'io.github.infolis.algorithm.LuceneSearcher'
			'io.github.infolis.algorithm.MetaDataExtractor'
			'io.github.infolis.algorithm.MultiMatchesLinker'
			'io.github.infolis.algorithm.NameExtractor'
			'io.github.infolis.algorithm.OntologyLinker'
			'io.github.infolis.algorithm.ReferenceLinker'
			'io.github.infolis.algorithm.RegexSearcher'
			'io.github.infolis.algorithm.ReliabilityBasedBootstrapping'
			'io.github.infolis.algorithm.SearchPatternsAndCreateLinks'
			'io.github.infolis.algorithm.SearchDoisAndCreateLinks'
			'io.github.infolis.algorithm.SearchNamesAndCreateLinks'
			'io.github.infolis.algorithm.SearchResultLinker'
			'io.github.infolis.algorithm.SpringerImporter'
			'io.github.infolis.algorithm.TagSearcher'
			'io.github.infolis.algorithm.TextAndMetaDataExtractor'
			'io.github.infolis.algorithm.TextExtractor'
			'io.github.infolis.algorithm.Tokenizer'
			'io.github.infolis.algorithm.TokenizerOpenNLP'
			'io.github.infolis.algorithm.TokenizerStanford'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.AllbusBibImporter'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.DbkImporter'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.ZisBibtexImporter'
			'org.gesis.git.LODInfrastructure.dataProcessing.enrichment.DatasetSearcher'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.AllbusRisImporter'
			'org.gesis.git.LODInfrastructure.dataProcessing.harvester.SowiportHarvester'
			'org.gesis.git.LODInfrastructure.dataProcessing.harvester.SofisWikiHarvester'
			'org.gesis.git.LODInfrastructure.dataProcessing.harvester.DbkHarvester'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.GlesBibtexImporter'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.GrisBibtexImporter'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.BibsonomyBibtexImporter'
			'org.gesis.git.LODInfrastructure.dataProcessing.importer.PiaacXmlImporter'
		]

	status
		@context
			dc:description """
				Status of the execution

				* PENDING
				* STARTED
				* FINISHED
				* FAILED

				Default (when starting): ExecutionStatus.PENDING
				"""
			vann:example 'SUCCESS'
		required true
		type String
		index: true
		enum: [
			"PENDING"
			"STARTED"
			"FAILED"
			"FINISHED"
		]
		hideFromSwagger: true

	log
		@context
			dc:description "Log messages of this execution."
		type: ArrayOfStrings
		hideFromSwagger: true

	startTime
		@context
			owl:sameAs 
				@id schema:startTime
			@type xsd:date
			dc:description "Timestamp when execution started."
		type Date
		hideFromSwagger: true

	endTime
		@context
			owl:sameAs 
				@id schema:endTime
			@type xsd:date
			dc:description "Timestamp when execution ended."
		type Date
		hideFromSwagger: true

	progress
		@context
			dc:description "Numerical progress of the execution in the interval 0-100."
		type: Number
		hideFromSwagger: true

	#
	# Parameters
	#

	inputFiles
		@context
			dc:description """
				List of URIs of input files.
				Can be either PDF or text files.
				They are for example used to search patterns within the Pattern Applier algorithm.
				"""
		refMany: infolis:InfolisFile

	outputFiles
		@context
			dc:description "List of URIs of output files. Output files to save the output files (txt files) of algorithms."
		refMany: infolis:InfolisFile

	removeBib
		@context
			dc:description "Whether to remove the bibliography from text/plain document."
		type Boolean

	tokenize
		@context
			dc:description """
				Whether to tokenize text input.
				
				Bootstrapping requires tokenized input texts to perform well. It can
				either be called on tokenized input texts or it can be called on
				untokenized text or pdf files and perform tokenization itself. If
				unspecified, defaults to false for TextExtractor. For Bootstrapping,
				this field has to be set explicitly as this information is crucial for
				good performance.
				"""
		type Boolean

	outputDirectory
		@context
			dc:description "Output directory of the indexer."
		type String

	indexDirectory
		@context
			dc:description "index directory of the indexer."
		type String

	phraseSlop
		@context
			dc:description """
				The slop for phrases used by the Lucene query parser.
				It determines how similar two phrases must be to be matched.
				If zero, then only exact phrase matches, if 10 up to 10 edit
				operations may be carried out.
				Default: 10
				"""
		type: Number

	allowLeadingWildcards
		@context
			dc:description """
				Determines whether the Lucene query parser is allowed to
				use leading wildcard characters.
				Default: true
				"""
		type Boolean

	maxClauseCount
		@context
			dc:description """
				The  maximum number of clauses permitted per BooleanQuery (Lucence search).
				A boolean query represents a query that matches documents
				matching boolean combinations of other queries.
				Default: Integer max value
				"""
		type: Number

	searchTerm
		@context
			dc:description """
				A search term that can be used in different algorithms whenever
				something a certain term needs to be searched in a text.
				For example, the bootstrapping algorithms need a seed in the beginning to start
				the whole process. The search term represents such a seed, e.g. the study name 'ALLBUS'.
				"""
		type String

	searchQuery
		@context
			dc:description """
				Any kind of search query that can be used within the algorithms.
				For example, it represtens the search query which is used
				to perform a search in different repositories to find
				fitting research data.
				"""
		refOne infolis:SearchQuery

	referenceGroup
		@context
			dc:description: """
				Group numbers to use for RegexSearcher: group of reference term.
				number of the group which contains the doi. This number depends on the used doiRegex
				"""
		type: Number
		default: 3

	leftContextGroup
		@context
			dc:description: """
				Group numbers to use for RegexSearcher: group of left context.
				"""
		type: Number
		default: 1

	rightContextGroup
		@context
			dc:description: """
				Group numbers to use for RegexSearcher: group of right context.
				"""
		type: Number
		default: 5

	textualReferences
		@context
			dc:description """
				A textual reference represents any kind of reference that
				can be find in a text, e.g. a term like a study name has been found in a publication.
				Besides the text and the term that has been found in the text,
				it also contains the context, i.e. where the term has been detected.
				"""
		refMany infolis:TextualReference

	patterns
		@context
			dc:description """
				A list of patterns (internally expressed as regular expression)
				that can be applied on texts, e.g. to find links to research data.
				"""
		refMany infolis:InfolisFile

	upperCaseConstraint
		@context
			dc:description """
				Indicates whether we require a term to contain at least one upper case
				character.

				The idea behind is that especially a study name is supposed to be a
				named entity and thus should contain at least one upper-case character.
				Default: false
				"""
		type Boolean

	seeds
		@context
			dc:description "The initial seeds for learning."
		type ArrayOfStrings

	maxIterations
		@context
			dc:description """
				Maximum number of iterations during the bootstrapping process.
				A high number of iterations can lead to a increased run time.
				Default: 10
				"""
		type Number

	windowsize
		@context
			dc:description "Number of words used for creation of patterns."
		type: Number
		default: 3

	reliabilityThreshold
		@context
			dc:description "Determines which patterns are the relevant ones."
		type Number
		default: 0.8

	bootstrapStrategy
		@context
			dc:description "Strategy to use for bootstrapping. Can either be: mergeCurrent, mergeNew, mergeAll, separate, reliability."
		type: String
		enum: [
			'mergeCurrent'
			'mergeNew'
			'mergeAll'
			'separate'
			'reliability'
		]

	searchResultLinkerClass
		@context
			dc:description """
				The SearchResultLinkerClass determines the SearchResultLinker to 
				use. That class is responsible for deciding which SearchResults to 
				select for creating links.
				"""
		type: String
		enum: [
			'io.github.infolis.algorithm.BestMatchLinker'
			'io.github.infolis.algorithm.MultiMatchesLinker'
			'io.github.infolis.algorithm.OntologyLinker'
			'io.github.infolis.algorithm.GoldLinker'
			'io.github.infolis.algorithm.DoiLinker'
		]

	links
		@context
			dc:description """
				As a final step, links between the texts and the discovered
				named entities (research data) are established and saved in this list.
				"""
		refMany infolis:EntityLink

	queryServices
		@context
			dc:description "List of QueryService to use. A query service to a certain repository can be posted and later referred."
		refMany infolis:QueryService

	queryServiceClasses
		@context
			dc:description "Instead of a using a list of QueryService URIs(queryServices), the Java classes of the QueryServices can be used. This way, the query serivces do not need to be posted."
		type: ArrayOfStrings
		enum: [
			'io.github.infolis.infolink.querying.DaraHTMLQueryService'
			'io.github.infolis.infolink.querying.DaraSolrQueryService'
			'io.github.infolis.infolink.querying.DataciteQueryService'
		]

	searchResults
		@context
			dc:description """
				After a search in one or more repositories, a list 
				of search results is returned. These results not only contain
				the repository which was searched but also information like
				the relevance score.
				"""
		refMany infolis:SearchResult

	linkedEntities
		@context
			dc:description """
				Beside the search in external repositories, we can also
				search in our own database. As use case, we get a URN for a publication
				from a user and want to show all named entities that are linked to 
				this publication. With an internal search using the generated links,
				we can find these entities which are returned in this list.
				"""
		refMany infolis:Entity

	infolisFileTags
		@context
			dc:description "List of tags to identify a specific set of InfolisFiles"
		type: ArrayOfStrings

	infolisPatternTags
		@context
			dc:description "List of tags to identify a specific set of InfolisPatterns"
		type: ArrayOfStrings
		
	textualReferenceTags
		@context
			dc:description "List of tags to identify a specific set of TextualReferences"
		type: ArrayOfStrings

	tags
		@context
			dc:description """
				Free-form tags to assign to the execution and all generated entities. 
				This makes all uploaded and generated data identifiable and searchable 
				e.g. using infolisFileTags, infolisPatternTags and textualReferenceTags. 
				"""
		type ArrayOfStrings
		index: true

	overwriteTextFiles
		@context
			dc:description """
				Flag used by TextExtractor: if set to false, pdfs for which corresponding text 
				files already exist in the specified text directory will not be converted again, instead 
				the existing text files will be returned as InfolisFile instances. If set to true, all 
				pdfs will be converted regardless of any existing files in the text directory. 
				"""
		type Boolean
		default: yes

	tokenizeNLs
		@context
			dc:description """
				Determines whether new line characters are to be tokenized.
				"""
		type Boolean
		default yes

	ptb3Escaping
		@context
			dc:description """
				Enable all traditional PTB3 token transforms (like parentheses becoming -LRB-, -RRB-).
				"""
		type Boolean
		default yes

	startPage
		@context
			dc:description """
				Index (starting at 1 rather than 0) of the first page to extract. 
				Useful to ignore title pages if present.
				"""
		type Number
		default 1

	entitiesForKeywordTagging
		@context
			dc:description """
				List of entities (URIs of the entities) for which key words should be
				generated. Serves as input for the keyword  tagging algorithm.
				"""
		refMany infolis:Entity

	keyWords
		@context
			dc:description """
				Key words which are generated by the KeywordTagger.
				"""
		type ArrayOfStrings

	thesaurus
		@context
			dc:description """
				Path/URI to the thesaurus which is used for the key word tagging.
				"""
		type: String

	abstractLanguage
		@context
			dc:description """
				Language of the abstracts
				"""
		type String
		enum: [
			"en"
			"de"
		]

	metaDataFiles
		@context
			dc:description """
				Meta data files of the publications in which information about
				the title, author, astract, subject, identifiers, URL, and language
				can be found.
			"""
		type ArrayOfStrings

SearchQuery
	@context
		dc:description "A search query"
		vann:example
			@id <http://infolis.gesis.org/infolink/api#!/rest-ld-searchQuery>
		@type owl:Class
	query
		@context
			dc:description "The query string"
		type String
		index: false
		required: yes

Entity
	@context
		dc:description "An entity to be linked from or to, i.e. a dataset or a publication"
		@type owl:Class
	name
		@context
			dc:description "Name of the entity"
		type String
		index: true
	versionInfo
		@context
			dc:description "Version of a datafile"
			owl:sameAs
				@id owl:versionInfo
		type String
		index true
	spatial
		@context
			owl:sameAs
				@id dcterms:spatial 
		type ArrayOfStrings
		index: false
	language
		@context
			owl:sameAs
				@id dc:language 
		type String
		index: false
	identifiers
		@context
			dc:description "Identifiers of the entity"
		type ArrayOfStrings
		index: false
	url
		@context
			dc:description "URL describing the entity or offering supplemental material"
		type String
		required no
	entityView
		@context
			dc:description "View to display for this entity (e.g. a citation string)"
		type String
		required no
	entityProvenance
		@context
			dc:description "Source of the entity"
		type String
		required no
	tags
		@context
			dc:description "Tags assigned to this entity"
		type ArrayOfStrings
		index: true
	textualReferences
		@context
			dc:description "TODO remove"
		refMany infolis:TextualReference
	numericInfo
		@context
			dc:description "Numeric information belonging to the entity, e.g. temporal coverage or publication date"
		type ArrayOfStrings
	entityReliability
		@context
			dc:description "Confidence value for this entity; less than 1 for automatically generated entities"
		type Number
	abstractText
		@context
			dc:description "The description of an entity which has been expressed in an abstract"
			owl:sameAs
			    @id dc:abstract
		type: String
	authors
		@context
			dc:description "List of authors who created the entity"
			owl:sameAs
			    @id dc:creator
		type ArrayOfStrings
	subjects
		@context
			dc:description "List of subjects which are assigned to an entity, this can either be free text keywords or keywords from a controlled vocabulary"
			owl:sameAs
			    @id dc:subject
		type ArrayOfStrings
	entityType
		@context
			dc:description "The type of entity: publication, dataset, database, citedData, project, institution or instrument"
		type String
		default "publication"
		enum: [
			"publication"
			"dataset"
			"database"
			"citedData"
			"project"
			"institution"
			"instrument"
		]
	journalTitle
		@context
			dc:description "bibliographic metadata: journal title"
		type String
	seriesTitle
		@context
			dc:description "bibliographic metadata: series title"
		type String
	collectionTitle
		@context
			dc:description "bibliographic metadata: collection title"
		type String
	number
		@context
			dc:description "bibliographic metadata: number"
		type String
	volume
		@context
 			dc:description "bibliographic metadata: volume"
		type String
	pages
		@context
			dc:description "bibliographic metadata: pages"
		type String
	corporateEditor
		@context
			dc:description "bibliographic metadata: corporateEditor"
		type String
	publisher
		@context
			dc:description "bibliographic metadata: publisher"
		type String
	isbn
		@context
			dc:description "bibliographic metadata: isbn"
		type String
	issn
		@context
			dc:description "bibliographic metadata: issn"
		type String
	doi
		@context
			dc:description "bibliographic metadata: doi"
		type String
	gwsId
		@context
			dc:description "id used by GWS"
		type String
	publicationType
		@context
			dc:description "bibliographic metadata: publicationType"
		type String
	location
		@context
			dc:description "bibliographic metadata: location"
		type String
	licence
		@context
			dc:description "bibliographic metadata: licence"
		type String
	dataProvider
		@context
			dc:description "bibliographic metadata: dataProvider"
		type String
	publicationStatus
		@context
			dc:description "bibliographic metadata: publicationStatus"
		type String
	month
		@context
			dc:description "bibliographic metadata: month"
		type String
	year
		@context
			dc:description "bibliographic metadata: year"
		type String
	editors
		@context
			dc:description "bibliographic metadata: editors"
		type ArrayOfStrings
	classification
		@context
			dc:description "bibliographic metadata: classification"
		type ArrayOfStrings
	methodKeywords
		@context
			dc:description "bibliographic metadata: methodKeywords"
		type ArrayOfStrings
	freeKeywords
		@context
			dc:description "bibliographic metadata: freeKeywords"
		type ArrayOfStrings

SearchResult
	@context
		dc:description "A search result"
		rdfs:subClassOf
			@id infolis:Entity
		@type owl:Class
	identifier
		@context
			dc:description "Identifiers of the search result"
		type String
	tags
		@context
			dc:description "Tags assigned to this search result"
		type ArrayOfStrings
	listIndex
		@context
			dc:description "Position in the list of search results"
		type Number
	relevanceScore
		@context
			dc:description "Relevance score as calculated by the search engine"
		type Number
	date
		@context
			dc:description "Date of the search resul"
		type String
	queryService
		@context
			dc:description "Query Service used to retrieve search result."
		type String
	titles
		@context
			dc:description "All titles that have been found as names, can also be from different lanuages"
		type ArrayOfStrings
	numericInformation
		@context
			dc:description "Any kind of numeric information that we can extract from a search result, e.g. years, versions etc."
		type ArrayOfStrings

InfolisPattern
	@context
		dc:description 'A Regular Expression pattern'
		@type owl:Class
	patternRegex
		@context
			dc:description "A string containing a Java Regular Expression pattern"
			owl:sameAs
				@id dqm:regex
		type String
	luceneQuery
		@context
			dc:description "The Lucene query that can be used to query an index"
		type String
	threshold
		@context
			dc:description "Threshold which is applied to only filter relevant patterns"
		type Number
	tags
		@context
			dc:description "Tags assigned to this pattern"
		type ArrayOfStrings
		index: true
	patternReliability
		@context
			dc:description "Confidence value for this pattern; less than 1 for automatically generated patterns"
		type Number

InfolisFile
	@context
		dc:description "A resource representing a file on the server."
		@type owl:Class
		owl:sameAs
			@id omnom:File
	manifestsEntity
		@context
			dc:description "The Entity this Infolisfile manifests"
		refOne infolis:Entity
	md5
		@context
			owl:sameAs
				@id omnom:md5
			@type xsd:string
			dc:description "MD5 checksum"
		type String
		validate 'MD5'
		required: no
		index: true
	fileName
		@context
			dc:description "The name of a file in the senseof what the `basename(1)` would return."
			owl:sameAs
				@id omnom:fileName
		type String
		required: no
		index: true
	mediaType
		@context
			owl:sameAs
				@id dcat:mediaType
			dc:description "The IANA media type of this file"
		type String
		enum: [
			"application/pdf"
			"text/plain"
		]
		required: true
		index: true
	fileStatus
		@context
			dc:description "The status of the bytestream of a file on the server, indicating whether it is still there or has been deleted"
			owl:sameAs
				@id omnom:fileStatus
		type: String
		enum: [
			'AVAILABLE'
			'DELETED'
		]
		required: no
	tags
		@context
			owl:sameAs
				@id dc:subject
			dc:description "A set of free form tags attached to this file"
		type ArrayOfStrings
		required: no
		index: true

QueryService
	@context
		dc:description "A query service"
		@type owl:Class
	queryServiceType:
		@context
			dc:description "Service for searching entities in a repository."
		type 'String'
		required true
		enum: [
			'io.github.infolis.infolink.querying.DaraHTMLQueryService'
			'io.github.infolis.infolink.querying.DaraSolrQueryService'
			'io.github.infolis.infolink.querying.DataciteQueryService'
		]
	target
		@context
			dc:description "The target of this QueryService, in most cases a URI"
			rdfs:range
				@id xsd:anyURI
		type: String
		required: yes
	serviceReliability
		@context
			dc:description "The reliability of this QueryService"
		type: Number
		required: yes
	maxNumber
		@context
			dc:description "Maximum number of results"
		type: Number
		required: no
		default: 1000
	queryStrategy
		@context
			dc:description "Fields that can be used in a query."
		type: ArrayOfStrings
		enum: [
			'title'
			'publicationDate'
			'numericInfoInTitle'
			'doi'
		]
		required no
	tags
		@context
			dc:description "Tags assigned to this query service"
		type ArrayOfStrings
		index: true

TextualReference
	@context
		dc:description "Class for saving contexts (= surrounding words of a term)."
		@type owl:Class
	leftText
		@context
			dc:description 'Text left of the term'
		type: String
	rightText
		@context
			dc:description 'Text right of the term'
		type: String
	reference
		@context
			dc:description "The term"
		type: String
		index: true
	textFile
		@context
			dc:description "The file this reference came from"
		refOne: infolis:InfolisFile
	mentionsReference
		@context
			dc:description "Entity that contains this textual reference"
		refOne: infolis:Entity
	pattern
		@context
			dc:description "Pattern that extracted this textual reference"
		refOne: infolis:InfolisPattern
	tags
		@context
			dc:description "Tags assigned to this textual reference"
		type ArrayOfStrings
		index: true
	referenceReliability
		@context
			dc:description "Confidence value for this textual reference; less than 1 for automatically generated references"
		type Number
		
EntityLink
	@context
		dc:description """
			An entity link describes that two entities are linked, i.e. a publication is linked to the research data that is mentioned in
			the publication text
			"""
		@type owl:Class
	fromEntity
		@context
			dc:description "The entity from which the link originates from, this is typically the publication"
		refOne infolis:Entity
		index: true
	toEntity
		@context
			dc:description "The entity to which is linked, this is typically the research data"
		refOne infolis:Entity
		index: true
	confidence
		@context
			dc:description "Describes how likely it is that the link indeed holds, xsd:double"
		type: Number
	linkView
		@context
			dc:description "View to display for this link"
		type String
		required no
	provenance
		@context
			dc:description "Source of the link"
		type String
		required no
	linkReason
		@context
			dc:description """
				The TextualReference found in the fromEntity based on which a 
				link to the toEntity was established
				"""
		type: String
		index: true
	entityRelations
		@context
			dc:description "Type of the relation that holds between fromEntity and toEntity"
			owl:sameAs
				@id dc:relation
		type ArrayOfStrings
		enum: [
			'part_of_temporal'
			'part_of_spatial'
			'superset_of_temporal'
			'superset_of_spatial'
			'parts_of_temporal'
			'parts_of_spatial'
			'version_of'
			'superset_of_version'
			'part_of_confidential'
			'superset_of_confidential'
			'part_of_sample'
			'superset_of_sample'
			'part_of_supplement'
			'superset_of_supplement'
			'part_of'
			'parts_of'
			'superset_of'
			'same_as_temporal'
			'same_as_spatial'
			'superset_of_translation'
			'part_of_translation'
			'part_of_methodical'
			'parts_of_methodical'
			'superset_of_methodical'
			'unknown'
			'same_as'
			'references'
		]
		index: false
	tags
		@context
			dc:description "Tags assigned to this entityLink"
		type ArrayOfStrings
		index: true

Keyword
	@context
		dc:description "Keywords indicate the topics of entities. They are generated by searching terms of a thesaurus in the abstract."
		@type owl:Class
	thesaurusURI
		@context
			dc:description: "URI of the keyword in the thesaurus."
		type: String
		required: true
	thesaurusLabel
		@context
			dc:description: "Label of the keyword in the thesaurus."
		type: String
		required: true
	referredEntity
		@context
			dc:description: "Refers to the entity to which the keyword has been assigned."
		refOne infolis:Entity
	confidenceScore
		@context
			dc:description: "The confidence score of a keyword bases on the similarity of the terms in the abstract to the terms in the thesaurus."
		type: Number
		required true
	tags
		@context
			dc:description "Tags assigned to this keyword"
		type ArrayOfStrings
		index: true
